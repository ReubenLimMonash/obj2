# Date: 30/08/2023
# Modified FANET_Dataset_with_Video.ini to use pcap CSV files as a way of passing in packet size and sending interval from pcap files
[General]

[Config PCAP_Traffic]
description = To generate FANET measured throughput dataset with traffic from PCAP CSV
network = fanet_adhoc_hosts_pcap
#record-eventlog = true

# --------------------- TESTING DATASET ----------------------------------
*.numPacketsRecord = ${NPR=-1} # NPR set to -1 to indicate record all packets sent
*.numHosts = ${N=7}
*.hdistRange = ${HDR=1200} # The range of horizontal distance to travel, in m
*.gcsX = ${GX=500} # X coord of GCS, in m
*.gcsY = ${GY=500} # Y coord of GCS, in m
*.swarmHeight = ${Z=75, 135, 225, 285, 75, 135, 225, 285, 75, 135, 225, 285, 75, 135, 225, 285}
*.uavRadius = ${R=5}
*.modulation = ${MCS="BPSK", "BPSK", "BPSK", "BPSK", "QPSK", "QPSK", "QPSK", "QPSK", "QAM-16", "QAM-16", "QAM-16", "QAM-16", "QAM-64", "QAM-64", "QAM-64", "QAM-64" ! Z} #"QAM-64", "QAM-16", "QPSK", "BPSK"
*.MCSBitrate = ${BR=6.5, 6.5, 6.5, 6.5, 13, 13, 13, 13, 26, 26, 26, 26, 52, 52, 52, 52 ! Z} # 52, 26, 13, 6.5
#*.modulation = ${MCS="QPSK", "QPSK", "QPSK", "QPSK", "QAM-16", "QAM-16", "QAM-16", "QAM-16", "QAM-64", "QAM-64", "QAM-64", "QAM-64", "QAM-64", "QAM-64", "QAM-64", "QAM-64" ! Z}
#*.MCSBitrate = ${BR=19.5, 19.5, 19.5, 19.5, 39, 39, 39, 39, 58.5, 58.5, 58.5, 58.5, 65, 65, 65, 65 ! Z} # 52, 26, 13, 6.5
*.uavSendingInterval = ${EUSI=10, 20, 66.7, 100, 20, 10, 100, 66.7, 66.7, 100, 10, 20, 100, 66.7, 20, 10 ! Z}
*.uavSpeed = ${USP=6, 12, 18, 26, 18, 26, 6, 12, 26, 18, 12, 6, 12, 6, 26, 18 ! Z} # The UAV speed
*.gcsSendingInterval = ${EGSI=20} 
*.videoBitRate = ${VBR=2} # In Mbps
*.videoPacketSize = ${VPS=1450} # In bytes (with header of 64 bytes)
*.videoSendingInterval = ${VSI=($VPS) * 8 * 0.001 / ($VBR)} # In ms
.csvFilePath = ${CSV="/home/wlau0003/Reuben_ws/FANET_Dataset/Test_Dataset_1_DJISpark_Throughput/data/UAVSpeed-" + string(${USP}) + "_BitRate-" + string(${BR}) + "_Height-" + string(${Z}) + "_Distance-" + string(${HDR}) + "_Modulation-" + ${MCS} + "_UAVSendingInterval-" + string(${EUSI})}
.dlPcapCsvFilePath = ${DLPCSV="/home/wlau0003/Reuben_ws/omnetpp-6.0/samples/fanet/simulations/uav_traffic_csv/djispark_dl.csv"} 
.ulPcapCsvFilePath = ${ULPCSV="/home/wlau0003/Reuben_ws/omnetpp-6.0/samples/fanet/simulations/uav_traffic_csv/djispark_ul.csv"} 
.vidPcapCsvFilePath = ${VIDPCSV="/home/wlau0003/Reuben_ws/omnetpp-6.0/samples/fanet/simulations/uav_traffic_csv/djispark_vid.csv"} 

## --------------------- SINGLE SCENARIO ----------------------------------
#*.uavSpeed = ${USP=26} # The UAV speed
#*.numPackets = ${NP=10000} # Number of measured throughput samples. This will determine the number of runs needed
#*.numPacketsRecord = ${NPR=-1} # NPR set to -1 to indicate record all packets sent
#*.numHosts = ${N=7}
#*.hdistRange = ${HDR=1200} # The range of horizontal distance to travel, in m
#*.gcsX = ${GX=500} # X coord of GCS, in m
#*.gcsY = ${GY=500} # Y coord of GCS, in m
#*.swarmHeight = ${Z=60}
#*.uavRadius = ${R=5}
#*.modulation = ${MCS="QAM-16"} #"QAM-64", "QAM-16", "QPSK", "BPSK"
#*.MCSBitrate = ${BR=39} # 52, 26, 13, 6.5
#*.uavSendingInterval = ${EUSI=100} # Just set this to the closest Estimated UAV Sending Interval 
#*.gcsSendingInterval = ${EGSI=20} 
#*.videoBitRate = ${VBR=2} # In Mbps
#*.videoPacketSize = ${VPS=1450} # In bytes (with header of 64 bytes)
#*.videoSendingInterval = ${VSI=($VPS) * 8 * 0.001 / ($VBR)} # In ms
#.csvFilePath = ${CSV="/home/research-student/omnet-fanet/temp/UAVSpeed-" + string(${USP}) + "_BitRate-" + string(${BR}) + "_Height-" + string(${Z}) + "_Distance-" + string(${HDR}) + "_Modulation-" + ${MCS} + "_UAVSendingInterval-" + string(${EUSI})}
#.dlPcapCsvFilePath = ${DLPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_dl.csv"} 
#.ulPcapCsvFilePath = ${ULPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_ul.csv"} 
#.vidPcapCsvFilePath = ${VIDPCSV="/home/research-student/omnet-fanet/uav_traffic_csv/djispark_vid.csv"}

# -------------- For micro-sim ---------------------
sim-time-limit = ${HDR}s / ${USP} # For micro-sim, determine the sim time from number of packets and sending rate (plus 10 is extra buffer)
#seed-set = ${SEED=($runnumber)} # Default is already ${runnumber}
#seed-set = ${SEED=1..10}
# To avoid file name too long issue
output-scalar-file = "${resultdir}/${configname}-${runnumber}.sca"  # use just the run number in the file name
output-vector-file = "${resultdir}/${configname}-${runnumber}.vec"  # use just the run number in the file name
eventlog-file = "${resultdir}/${configname}-${runnumber}.elog" # use just the run number in the file name
snapshot-file = "${resultdir}/${configname}-${runnumber}.sna" # use just the run number in the file name

# ----------- Mobility ---------- #
# GW-node mobility
*.gatewayNode.mobility.typename = "LinearMobility"
*.gatewayNode.mobility.initialY = ${GY}m
*.gatewayNode.mobility.initialX = ${GX}m
*.gatewayNode.mobility.initialZ = ${Z}m
*.gatewayNode.mobility.constraintAreaMinX = ${GX}m
*.gatewayNode.mobility.constraintAreaMaxX = ${HDR}m + ${GX}m
*.gatewayNode.mobility.speed = ${USP}mps
*.gatewayNode.mobility.initialMovementHeading = 0deg
*.gatewayNode.mobility.initFromDisplayString = false

# UAV member(s) mobility
*.adhocNode[*].mobility.typename = "AttachedMobility"
*.adhocNode[*].mobility.mobilityModule = "^.^.gatewayNode.mobility"
*.adhocNode[*].mobility.offsetX = ${R}m * cos(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.offsetY = ${R}m * sin(parentIndex() * (6.283185 / ${N}))
*.adhocNode[*].mobility.offsetZ = 0m
*.adhocNode[*].mobility.initFromDisplayString = false

# GCS mobility
**.GCS.mobility.typename = "StationaryMobility"
**.GCS.mobility.initialX = ${GXGCS=500}m
**.GCS.mobility.initialY = ${GY}m
**.GCS.mobility.initialZ = 0m
**.GCS.mobility.initFromDisplayString = false

# Bounding box constraint
**.constraintAreaMinX = -100m
**.constraintAreaMinY = -100m
**.constraintAreaMinZ = -100m
**.constraintAreaMaxX = 2200m
**.constraintAreaMaxY = 1000m
**.constraintAreaMaxZ = 500m

#**.initFromDisplayString = false

# ---------------- Network Layer --------------------#
*.gatewayNode.ipv4.arp.typename = "GlobalArp"
*.GCS.ipv4.arp.typename = "GlobalArp"
*.adhocNode[*].ipv4.arp.typename = "GlobalArp"
# ---------------- Setting up routes and IP ------------------ #
*.configurator.config = xmldoc("fanet_routes_2.xml")
*.configurator.addStaticRoutes = false
*.configurator.dumpConfig = "routes_dump.xml"
*.configurator.dumpRoutes = true

# ----------- Setting up physical layer and channel ---------- #
# Radio
**.wlan[0].typename = "Ieee80211Interface"
**.wlan[0].radio.typename = "Ieee80211ScalarRadio"

# 802.11n
**.wlan[0].opMode = "n(mixed-2.4Ghz)"
**.numAntennas = 1
**.bandwidth = 20MHz
**.centerFrequency = 2.4GHz
**.wlan[*].bitrate = ${BR}Mbps
**.wlan[*].radio.transmitter.modulation = ${MCS} #"QAM-64", "QAM-16", "QPSK", "BPSK"

# Channel modelling 
#**.wlan[0].radio.transmitter.power = 100mW 
*.GCS.wlan[0].radio.transmitter.power = 100mW # 20 dBm
*.gatewayNode.wlan[0].radio.transmitter.power = 100mW # 20 dBm
*.adhocNode[*].wlan[0].radio.transmitter.power = 100mW  # 20 dBm
**.wlan[0].radio.receiver.sensitivity = -90dBm
#**.wlan[0].radio.receiver.energyDetection = -90dBm
*.radioMedium.backgroundNoise.power = -86dBm # -107dBm, -86dBm
**.pathLoss.typename = "LognormalRicianFading"
**.pathLoss.a = 0.1
**.pathLoss.b = 0.00075
**.pathLoss.c = 8
**.pathLoss.alpha_min = 2
**.pathLoss.alpha_max = 2.75
**.pathLoss.sigma_a = 11.1852
**.pathLoss.sigma_b = 0.06
**.pathLoss.K_min = 1.4922 # (In dB) For suburban in 2.4GHz
**.pathLoss.K_max = 12.2272  # (In dB) For suburban in 2.4GHz
**.propagation.typename = "ConstantSpeedPropagation"

# Set fragmentation threshold to allow no-fragmentation of video packets
**.mac.dcf.originatorMacDataService.fragmentationPolicy.fragmentationThreshold = 1574B

# -----------  Application ---------- #
# Flow 1 Application (Broadcast CNC messages to UAV nodes) 
# GCS
*.GCS.ipv4.ip.directBroadcastInterfaces = "wlan0"
*.GCS.numApps = 3 # 2
*.GCS.app[0].typename = "UdpGCSCsvApp"
*.GCS.app[0].localPort = 5000
*.GCS.app[0].destPort = 5000
*.GCS.app[0].packetName = "CNCData"
*.GCS.app[0].destAddresses = "adhocNode[0] adhocNode[1] adhocNode[2] gatewayNode" # Just to fill it up, not actually used in this mode
*.GCS.app[0].numMemberUAVs = ${N}
*.GCS.app[0].sendInterval = ${EGSI}ms
*.GCS.app[0].startTime = uniform(0ms, 1ms)
*.GCS.app[0].stopTime = ${HDR}s / ${USP} 
*.GCS.app[0].numPacketRecord = ${NPR}
*.GCS.app[0].pcapCsvFileName = ${DLPCSV}
*.GCS.app[0].seed = ${seedset} # For shuffling PCAP data
*.GCS.app[0].timeToLive = 255
*.GCS.app[1].typename = "UdpSink"
*.GCS.app[1].localPort = 5001
*.GCS.app[1].receiveBroadcast = true
*.GCS.app[2].typename = "UdpSink"
*.GCS.app[2].localPort = 5002
*.GCS.app[2].receiveBroadcast = true

# Gateway
*.gatewayNode.numApps = 3 # 2
*.gatewayNode.app[0].typename = "UdpSink"
*.gatewayNode.app[0].localPort = 5000
*.gatewayNode.app[0].receiveBroadcast = true
*.gatewayNode.app[1].typename = "UdpBasicCsvApp"
*.gatewayNode.app[1].localPort = 5001
*.gatewayNode.app[1].destPort = 5001
*.gatewayNode.app[1].packetName = "GatewayData"
*.gatewayNode.app[1].destAddresses = "GCS"
*.gatewayNode.app[1].timeToLive = 255
*.gatewayNode.app[1].sendInterval = ${EUSI}ms
*.gatewayNode.app[1].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[1].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.gatewayNode.app[1].pcapCsvFileName = ${ULPCSV}
*.gatewayNode.app[1].seed = ${seedset} # For shuffling PCAP data
*.gatewayNode.app[1].dontFragment = true
#*.gatewayNode.app[2].typename = "UdpBasicCsvApp"
#*.gatewayNode.app[2].localPort = 5002
#*.gatewayNode.app[2].destPort = 5002
#*.gatewayNode.app[2].packetName = "GatewayVideo"
#*.gatewayNode.app[2].destAddresses = "GCS"
#*.gatewayNode.app[2].timeToLive = 255
#*.gatewayNode.app[2].startTime = uniform(0ms, 1ms)
#*.gatewayNode.app[2].stopTime = ${SIMTIME}s
#*.gatewayNode.app[2].sendInterval = ${VPS}ms * 8 * 0.001 / ${VBR}
#*.gatewayNode.app[2].numPacketRecord = ${NPR}
#*.gatewayNode.app[2].pcapCsvFileName = ${VIDPCSV}
#*.gatewayNode.app[2].dontFragment = true
*.gatewayNode.app[2].typename = "UdpBasicApp"
*.gatewayNode.app[2].localPort = 5002
*.gatewayNode.app[2].destPort = 5002
*.gatewayNode.app[2].messageLength = ${VPS}bytes
*.gatewayNode.app[2].sendInterval = ${VPS}ms * 8 * 0.001 / ${VBR}
*.gatewayNode.app[2].packetName = "GatewayVideo" # Important to name it this
*.gatewayNode.app[2].destAddresses = "GCS"
*.gatewayNode.app[2].timeToLive = 255
*.gatewayNode.app[2].startTime = uniform(0ms, 1ms)
*.gatewayNode.app[2].stopTime = ${HDR}s / ${USP} 
*.gatewayNode.app[2].numPacketRecord = ${NPR}
*.gatewayNode.app[2].dontFragment = true

# UAVs
*.adhocNode[*].numApps = 2
*.adhocNode[*].app[0].typename = "UdpSink"
*.adhocNode[*].app[0].localPort = 5000
*.adhocNode[*].app[0].receiveBroadcast = true
*.adhocNode[*].app[1].typename = "UdpBasicCsvApp"
*.adhocNode[*].app[1].localPort = 5001
*.adhocNode[*].app[1].destPort = 5001
*.adhocNode[*].app[1].packetName = "UAVData_" + string(parentIndex())
*.adhocNode[*].app[1].destAddresses = "GCS"
*.adhocNode[*].app[1].timeToLive = 255
*.adhocNode[*].app[1].sendInterval = ${EUSI}ms
*.adhocNode[*].app[1].startTime = uniform(0ms, 1ms)
*.adhocNode[*].app[1].stopTime = ${HDR}s / ${USP} 
*.adhocNode[*].app[1].numPacketRecord = ${NPR} # NPR set to -1 to indicate record all packets sent # int(ceil(${NPR} / (${N}+1)))
*.adhocNode[*].app[1].pcapCsvFileName = ${ULPCSV}
*.adhocNode[*].app[1].seed = ${seedset} # For shuffling PCAP data

# ----------- Recording Data ------------#
#**.result-recording-modes = -vector
#**.app[*].throughput.result-recording-modes = +vector
#*.gatewayNode.wlan[0].radio.minSnir.result-recording-modes = +vector
#*.radioMedium.recordCommunicationLog = true

# Storing to CSV File
# Application level monitoring

*.GCS.wlan[0].radio.receiver.csvFilePath = ${CSV}
*.GCS.wlan[0].radio.receiver.csvFileName = "Run-" + string(${seedset}) + "_GCS-Wlan.csv"
*.GCS.app[*].csvFilePath = ${CSV}
*.GCS.app[0].csvFileName = "Run-" + string(${seedset}) + "_GCS-Tx.csv"
*.GCS.app[1].csvFileName = "Run-" + string(${seedset}) + "_GCS-Rx.csv"
*.GCS.app[2].csvFileName = "Run-" + string(${seedset}) + "_GCS-Video-Rx.csv"

*.gatewayNode.wlan[0].radio.receiver.csvFilePath = ${CSV}
*.gatewayNode.wlan[0].radio.receiver.csvFileName = "Run-" + string(${seedset}) + "_GW-Wlan.csv"
*.gatewayNode.app[*].csvFilePath = ${CSV}
*.gatewayNode.app[0].csvFileName = "Run-" + string(${seedset}) + "_GW-Rx.csv"
*.gatewayNode.app[1].csvFileName = "Run-" + string(${seedset}) + "_GW-Tx.csv"
*.gatewayNode.app[2].csvFileName = "Run-" + string(${seedset}) + "_GW-Video-Tx.csv"

*.adhocNode[*].wlan[0].radio.receiver.csvFilePath = ${CSV}
*.adhocNode[*].wlan[0].radio.receiver.csvFileName = "Run-" + string(${seedset}) + "_UAV-" + string(ancestorIndex(3)) + "-Wlan.csv"
*.adhocNode[*].app[*].csvFilePath = ${CSV}
*.adhocNode[*].app[0].csvFileName = "Run-" + string(${seedset}) + "_UAV-" + string(parentIndex()) + "-Rx.csv"
*.adhocNode[*].app[1].csvFileName = "Run-" + string(${seedset}) + "_UAV-" + string(parentIndex()) + "-Tx.csv"

# Wlan monitoring mode 
*.GCS.wlan[0].radio.receiver.monitorMode = false
*.gatewayNode.wlan[0].radio.receiver.monitorMode = false
*.adhocNode[*].wlan[0].radio.receiver.monitorMode = false

# ----------- Setting up PCAP Recording ---------- #
#*.gatewayNode.numPcapRecorders = 3
#*.gatewayNode.pcapRecorder[2].pcapFile = ${PCAP}
##*.GCS.pcapRecorder[*].packetFilter = "*CNCData" # NOT WORKING
#**.crcMode = "computed"
#**.fcsMode = "computed"

# ----------- Setting up Visualization ---------- #
*.visualizer.physicalLinkVisualizer.displayLinks = true
*.visualizer.mobilityVisualizer[*].displayVelocities = false
*.visualizer.mobilityVisualizer[*].displayMovementTrails = false
*.visualizer.interfaceTableVisualizer[*].displayInterfaceTables = true
*.visualizer.physicalLinkVisualizer[*].displayLinks = true
*.visualizer.physicalLinkVisualizer[*].packetFilter = "CNCData UAVData* GatewayData"

#*.GCS.wlan[0].radio.displayCommunicationRange = true
#*.gatewayNode.wlan[0].radio.displayCommunicationRange = true
#*.adhocNode*.wlan[0].radio.displayInterferenceRange = true
**.wlan[0].radio.displayCommunicationRange = true
*.visualizer.dataLinkVisualizer[*].displayLinks = true
*.visualizer.dataLinkVisualizer[*].packetFilter = "CNCData UAVData* GatewayData"
*.visualizer.networkRouteVisualizer[*].displayRoutes = true
#*.visualizer.*.routingTableVisualizer[*].displayRoutingTables = true
#*.visualizer.*.routingTableVisualizer[*].destinationFilter = "*"

