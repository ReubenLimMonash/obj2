'''
Date: 23/05/2022
Desc: Pre-processing of data generated by OMNeT++
'''

import pandas as pd
import numpy as np
import os, sys

def rssi_to_np(rssi):
    # Function to convert rssi data from string (e.g. "435 pW") to exp (435e-12)
    rssi_num = np.zeros(rssi.shape)
    index = 0
    for r in rssi:
        num = r[0:-2]
        expn = r[-2:]
        # print(num)
        # print(expn)
        if expn == " W":
            # print(num)
            # print(index)
            rssi_num[index] = float(num)
        elif expn == "mW":
            rssi_num[index] = float(num) * 1e-3
        elif expn == "uW":
            rssi_num[index] = float(num) * 1e-6
        elif expn == "nW":
            rssi_num[index] = float(num) * 1e-9
        elif expn == "pW":
            rssi_num[index] = float(num) * 1e-12
        else:
            print(expn)
            raise ValueError("Unhandled unit prefix")
        index += 1
    return rssi_num

def process_micro_sim(dir, delay_th):
    '''
    Function to process the CSV files generated by each micro-simulation
    Input: dir - The directory to process the file
           delay_th - The delay threshold to calculate reliability
    '''
    for root, subdirs, files in os.walk(dir):
        uavs_rx_df_list = [] # List to store all df for UAVs Rx app
        uavs_tx_df_list = [] # List to store all df for UAVs Tx app
        
        # If dir has no data files, return None
        if not files:
            return None, None

        for file in files:
            if (file[0:3] == 'GCS') and ('Tx' in file):
                # DOWNLINK
                # This is the GCS Tx file, recording the sent packets from GCS
                gcs_tx_df = pd.read_csv(os.path.join(root, file))
                num_gcs_sent = gcs_tx_df.shape[0] # The number of data entries in gcs_tx_df is the number of packets sent by the GCS
                # num_gcs_sent_members = gcs_tx_df[gcs_tx_df["Dest_Addr"] != "192.168.0.1"].shape[0] # The number of packets sent to member UAVs (192.168.0.1 is the addr of the GW)
                # num_gcs_sent_gw = gcs_tx_df[gcs_tx_df["Dest_Addr"] == "192.168.0.1"].shape[0] # The number of packets sent to the GW (192.168.0.1 is the addr of the GW)
            elif (file[0:2] == 'GW') and ('Rx' in file):
                # DOWNLINK
                # This is the gateway Rx file, let's get the information of packets received from GCS
                gw_rx_df = pd.read_csv(os.path.join(root, file))
                uavs_rx_df_list.append(gw_rx_df)
            elif (file[0:3] == 'UAV') and ('Rx' in file):
                # DOWNLINK
                # This is a UAV Rx file. To concatenate all such files into a single df
                uav_rx_df = pd.read_csv(os.path.join(root, file))
                # uav_cnc_data = uav_rx_df["CNCData" in uav_rx_df["Packet_Name"]] # Get the CNC Data received by this UAV
                # uav_cnc_reliable = uav_cnc_data[uav_cnc_data["Delay"] < delay_th] # Get the CNCData packets received reliably by this UAV (delay < 1ms)
                uavs_rx_df_list.append(uav_rx_df) # Append to list for concatenation later
            elif (file[0:3] == 'GCS') and ('Rx' in file):
                # UPLINK
                # This is a GCS Rx file, recording packets received from UAVs
                gcs_rx_df = pd.read_csv(os.path.join(root, file))
                gcs_reliable = gcs_rx_df[gcs_rx_df["Delay"] < delay_th]
                num_gcs_rcvd = gcs_reliable.shape[0] # The number of data entries in gcs_reliable is the number of packets received reliably by the GCS
            elif (file[0:2] == 'GW') and ('Tx' in file):
                # UPLINK
                # This is the gateway Tx file, recording packet transmissions to GCS from gateway
                gw_tx_df = pd.read_csv(os.path.join(root, file))
                uavs_tx_df_list.append(gw_tx_df) # Append to list for concatenation later
            elif (file[0:3] == 'UAV') and ('Tx' in file):
                # DOWNLINK
                # This is a UAV Rx file. To concatenate all such files into a single df
                uav_tx_df = pd.read_csv(os.path.join(root, file))
                uavs_tx_df_list.append(uav_tx_df) # Append to list for concatenation later
            else:
                # This file type is not handled, pass 
                pass
        if uavs_rx_df_list:
            uavs_rx_df = pd.concat(uavs_rx_df_list, ignore_index = True)
            uavs_reliable = uavs_rx_df[uavs_rx_df["Delay"] < delay_th] # Get the CNCData packets received reliably by all UAVs (delay < 1ms)
            # Process DOWNLINK data (NOT INCLUDING GW)
            dl_reliability = uavs_reliable.shape[0] / num_gcs_sent # Calculate the communication reliability of GCS -> UAVs
            dl_avg_rssi = rssi_to_np(uavs_rx_df["RSSI"]).mean()
            dl_avg_sinr = uavs_rx_df["SINR"].mean()
            gw_avg_rssi = rssi_to_np(gw_rx_df["RSSI"]).mean()
            gw_avg_sinr = gw_rx_df["SINR"].mean()
            dl_avg_delay = uavs_rx_df["Delay"].mean()
            dl_avg_throughput = uavs_rx_df["Throughput"].mean()
            # dl_avg_distance = uavs_rx_df["Distance"].mean()
            dl_json = {"Reliability": dl_reliability, "Avg_RSSI": dl_avg_rssi, "Avg_SINR": dl_avg_sinr, "GW_Avg_RSSI": gw_avg_rssi, "GW_Avg_SINR": gw_avg_sinr, "Avg_Delay": dl_avg_delay, "Avg_Throughput": dl_avg_throughput}
        else:
            dl_json = None

        if uavs_tx_df_list:
            uavs_tx_df = pd.concat(uavs_tx_df_list, ignore_index = True)
            # Process UPLINK data
            num_uav_sent = uavs_tx_df.shape[0] # Total number of packets sent by the UAVs to the GCS
            ul_reliability = num_gcs_rcvd / num_uav_sent # Calculate the communication reliability of UAVs -> GCS
            ul_avg_rssi = rssi_to_np(gcs_rx_df["RSSI"]).mean()
            ul_avg_sinr = gcs_rx_df["SINR"].mean()
            ul_avg_delay = gcs_rx_df["Delay"].mean()
            ul_avg_throughput = gcs_rx_df["Throughput"].mean()
            # ul_avg_distance = gcs_rx_df["Distance"].mean()
            ul_json = {"Reliability": ul_reliability, "Avg_RSSI": ul_avg_rssi, "Avg_SINR": ul_avg_sinr, "Avg_Delay": ul_avg_delay, "Avg_Throughput": ul_avg_throughput}
        else:
            ul_json = None

        return dl_json, ul_json