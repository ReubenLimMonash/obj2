import pandas as pd # for data manipulation 
import numpy as np
import networkx as nx # for drawing graphs
import matplotlib.pyplot as plt # for drawing graphs
import os, sys, glob, math
import time
from tqdm import tqdm
'''
Date: 6/2/2023
Desc: To process data from Taguchi DoE for testing convergence of dataset with 1000, 10000 and 100000 packets.
      In each Taguchi experiment, the UAVs were set to only travel about 100 m in the simulation.
'''
def rssi_to_np(rssi):
    # Function to convert rssi data from string (e.g. "435 pW") to exp (435e-12)
    rssi_num = np.zeros(rssi.shape)
    index = 0
    for r in rssi:
        num = r[0:-2]
        expn = r[-2:]
        # print(num)
        # print(expn)
        if expn == " W":
            # print(num)
            # print(index)
            rssi_num[index] = float(num)
        elif expn == "mW":
            rssi_num[index] = float(num) * 1e-3
        elif expn == "uW":
            rssi_num[index] = float(num) * 1e-6
        elif expn == "nW":
            rssi_num[index] = float(num) * 1e-9
        elif expn == "pW":
            rssi_num[index] = float(num) * 1e-12
        else:
            print(expn)
            raise ValueError("Unhandled unit prefix")
        index += 1
    return rssi_num

def compile_micro_sim_data(file_list):
    '''
    VERSION 2
    Function to compile data from the CSV files generated by each micro-simulation
    Update: To specifically return the rx_df, tx_df, mon_df and pd_df in lists, so that specific dfs can be accessed (instead of aggregating UAV dfs)
    Input: file_list - List of simulation files belonging to a certain scenario (micro-sim)
    Output: concatenates the raw data to UL and DL dataframes
    '''

    # Let's get the GCS dfs ===============================================================
    gcs_rx_file = [file for file in file_list if (('_GCS-' in file) and ('-Rx' in file))]
    gcs_tx_file = [file for file in file_list if (('_GCS-' in file) and ('-Tx' in file))]
    gcs_mon_file = [file for file in file_list if (('_GCS-' in file) and ('Wlan' in file))]
    gcs_pd_file = [file for file in file_list if (('_GCS-' in file) and ('PacketDrop' in file))]
    if len(gcs_rx_file) > 0:
        gcs_rx_df = pd.read_csv(gcs_rx_file[0])
    else:
        print("GCS RX File Missing")
        print(file_list[0])
    if len(gcs_tx_file) > 0:
        gcs_tx_df = pd.read_csv(gcs_tx_file[0])
    else:
        print("GCS TX File Missing")
        print(file_list[0])
    if len(gcs_pd_file) > 0:
        gcs_pd_df = pd.read_csv(gcs_pd_file[0])
    else:
        print("GCS PD File Missing")
        print(file_list[0])
    if len(gcs_mon_file) > 0:
        gcs_mon_df = pd.read_csv(gcs_mon_file[0]) # Mon file is optional
        gcs_mon_df["Addr"] = "192.168.0.1"
    else: 
        gcs_mon_df = None

    # Let's get the GW dfs ===============================================================
    gw_rx_file = [file for file in file_list if (('_GW-' in file) and ('-Rx' in file))]
    gw_tx_file = [file for file in file_list if (('_GW-' in file) and ('-Tx' in file))]
    gw_mon_file = [file for file in file_list if (('_GW-' in file) and ('Wlan' in file))]
    gw_pd_file = [file for file in file_list if (('_GW-' in file) and ('PacketDrop' in file))]
    if len(gw_rx_file) > 0:
        gw_rx_df = pd.read_csv(gw_rx_file[0])
    else:
        print("GW RX File Missing")
        print(file_list[0])
    if len(gw_tx_file) > 0:
        gw_tx_df = pd.read_csv(gw_tx_file[0])
    else:
        print("GW TX File Missing")
        print(file_list[0])
    if len(gw_pd_file) > 0:
        gw_pd_df = pd.read_csv(gw_pd_file[0])
    else:
        print("GW PD File Missing")
        print(file_list[0])
    if len(gw_mon_file) > 0:
        gw_mon_df = pd.read_csv(gw_mon_file[0]) # Mon file is optional
        gw_mon_df["Addr"] = "192.168.0.2"
    else:
        gw_mon_df = None

    # Let's get the UAVs dfs ===============================================================
    uavs_rx_df_list = []
    uavs_tx_df_list = []
    uavs_mon_df_list = []
    uavs_pd_df_list = []
    uav_rx_files = [file for file in file_list if (('_UAV-' in file) and ('-Rx' in file))]
    uav_tx_files = [file for file in file_list if (('_UAV-' in file) and ('-Tx' in file))]
    uav_mon_files = [file for file in file_list if (('_UAV-' in file) and ('Wlan' in file))]
    uav_pd_files = [file for file in file_list if (('_UAV-' in file) and ('PacketDrop' in file))]
    uav_rx_files.sort()
    uav_tx_files.sort()
    uav_mon_files.sort()
    uav_pd_files.sort()
    if len(uav_rx_files) > 0:
        for uav_rx_file in uav_rx_files:
            uavs_rx_df_list.append(pd.read_csv(uav_rx_file))
    else:
        print("UAV RX File(s) Missing")
        print(file_list[0])
    if len(uav_tx_files) > 0:
        for uav_tx_file in uav_tx_files:
            uavs_tx_df_list.append(pd.read_csv(uav_tx_file))
    else:
        print("UAV TX File(s) Missing")
        print(file_list[0])
    if len(uav_pd_files) > 0:
        for uav_pd_file in uav_pd_files:
            uavs_pd_df_list.append(pd.read_csv(uav_pd_file))
    else:
        print("UAV PD File(s) Missing")
        print(file_list[0])
    if len(uav_mon_files) > 0: # UAV mon files are optional now
        uav_member_index = 3
        for uav_mon_file in uav_mon_files:
            uav_mon_df = pd.read_csv(uav_mon_file)
            uav_mon_df["Addr"] = "192.168.0." + str(uav_member_index)
            uavs_mon_df_list.append(uav_mon_df)
            uav_member_index += 1
    else:
        uavs_mon_df_list = []

    rx_df_list = [gcs_rx_df, gw_rx_df] + uavs_rx_df_list
    tx_df_list = [gcs_tx_df, gw_tx_df] + uavs_tx_df_list
    pd_df_list = [gcs_pd_df, gw_pd_df] + uavs_pd_df_list
    mon_df_list = [gcs_mon_df, gw_mon_df] + uavs_mon_df_list

    # UNCOMMENT BELOW IF RSSI DATA WILL BE USED
    for rx_df in rx_df_list:
        rx_df["RSSI"] = rssi_to_np(rx_df["RSSI"])
    for pd_df in pd_df_list:
        pd_df["RSSI"] = rssi_to_np(pd_df["RSSI"])
    for mon_df in mon_df_list:
        if mon_df is not None:
            mon_df["RSSI"] = rssi_to_np(mon_df["RSSI"])

    return rx_df_list, tx_df_list, pd_df_list, mon_df_list

if __name__ == "__main__":
    # Let's get the data ----------------------------------------------------------------
    # sim_root_path = "/home/research-student/omnetpp_sim_results/TaguchiDoE/NumPackets-1000"
    # sim_root_path = "/home/research-student/omnetpp_sim_results/TaguchiDoE/NumPackets-10000"
    sim_root_path = "/home/research-student/omnetpp_sim_results/TaguchiDoE/NumPackets-100000"
    save_path = os.path.join("/",*sim_root_path.split("/")[0:-1])
    NP = int(sim_root_path.split("/")[-1].split("-")[-1])
    scenario_list = [csv.split('/')[-1][0:-11] for csv in glob.glob(sim_root_path + "/*GCS-Tx.csv")] # Get list of "unique" scenarios
    scenario_list.sort()
    dl_reliability = []
    ul_reliability = []
    for scenario in tqdm(scenario_list):
        # NOTE: In each scenario, the UAVs travelled about 100m
        print(scenario)
        scenario_files = glob.glob(sim_root_path + "/{}_*.csv".format(scenario)) # Get list of csv files belonging to this scenario
        rx_df_list, tx_df_list, pd_df_list, mon_df_list = compile_micro_sim_data(scenario_files)
        scenario_params = scenario.split('_')
        height = int(scenario_params[2].split('-')[-1]) 
        sending_interval_min = int(scenario_params[5].split('-')[-1]) 

        # Get DOWNLINK RELIABILITY ----------------------------------------------------------------
        delay_threshold = 0.04 # Delay threshold in sec for reliability
        tx_df_gcs = tx_df_list[0]
        rx_df_uavs = pd.concat(rx_df_list[1:], ignore_index=True)
        num_tx_per_class = len(tx_df_gcs)
        num_reliable = np.count_nonzero((rx_df_uavs["Delay"] <= delay_threshold))
        reliability = num_reliable / num_tx_per_class
        dl_reliability.append(reliability)

        # Get UPLINK RELIABILITY (From UAV to GCS) ----------------------------------------------------------------
        delay_threshold = 0.04 # Delay threshold in sec for reliability
        tx_df_uavs = pd.concat(tx_df_list[1:], ignore_index=True)
        rx_df_gcs = rx_df_list[0]
        num_tx_per_class = len(tx_df_uavs)
        num_reliable = np.count_nonzero((rx_df_gcs["Delay"] <= delay_threshold))
        reliability = num_reliable / num_tx_per_class
        ul_reliability.append(reliability)

    distance_classes_column = ["Reliability"]
    dl_reliability_df = pd.DataFrame(dl_reliability, columns = distance_classes_column)
    ul_reliability_df = pd.DataFrame(ul_reliability, columns = distance_classes_column)
    dl_reliability_df["Scenario"] = scenario_list
    ul_reliability_df["Scenario"] = scenario_list
    dl_reliability_df.to_csv(os.path.join(save_path,"Processed_Reliability_DL-NumPackets-{}.csv".format(NP)), index=False)
    ul_reliability_df.to_csv(os.path.join(save_path,"Processed_Reliability_UL-NumPackets-{}.csv".format(NP)), index=False)